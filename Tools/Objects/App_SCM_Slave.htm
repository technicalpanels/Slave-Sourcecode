<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\App_SCM_Slave.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\App_SCM_Slave.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Fri Aug 25 13:59:52 2017
<BR><P>
<H3>Maximum Stack Usage =        136 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
CAN0IntHandler &rArr; CanBusTxWrite &rArr; CanBusSet
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[26]">CANMessageClear</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">CANMessageClear</a><BR>
 <LI><a href="#[2]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">FaultISR</a><BR>
 <LI><a href="#[1]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NmiSR</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[13]">CABModeBackground</a> from cab_mod.o(i.CABModeBackground) referenced from cab_mod.o(.data)
 <LI><a href="#[12]">CABMode_Initial</a> from cab_mod.o(i.CABMode_Initial) referenced from cab_mod.o(.data)
 <LI><a href="#[6]">CAN0IntHandler</a> from hcan.o(i.CAN0IntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[a]">Dummy_Fucntions</a> from commandctrl.o(i.Dummy_Fucntions) referenced from commandctrl.o(i.Command_Init)
 <LI><a href="#[2]">FaultISR</a> from interrupt.o(i.FaultISR) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[7]">GPIOP0IntHandler</a> from wiegand.o(i.GPIOP0IntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[8]">GPIOQ0IntHandler</a> from wiegand.o(i.GPIOQ0IntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[d]">HeartBeat_Read</a> from commandctrl.o(i.HeartBeat_Read) referenced from commandctrl.o(i.Command_Init)
 <LI><a href="#[3]">IntDefaultHandler</a> from interrupt.o(i.IntDefaultHandler) referenced 111 times from startup_rvmdk.o(RESET)
 <LI><a href="#[1]">NmiSR</a> from interrupt.o(i.NmiSR) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[f]">Read_Boot_Status</a> from commandctrl.o(i.Read_Boot_Status) referenced from commandctrl.o(i.Command_Init)
 <LI><a href="#[0]">Reset_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[c]">SDO1_Read</a> from commandctrl.o(i.SDO1_Read) referenced from commandctrl.o(i.Command_Init)
 <LI><a href="#[b]">SDO1_Write</a> from commandctrl.o(i.SDO1_Write) referenced from commandctrl.o(i.Command_Init)
 <LI><a href="#[11]">SideBackground</a> from side_mod.o(i.SideBackground) referenced from side_mod.o(.data)
 <LI><a href="#[10]">SideMode_Initial</a> from side_mod.o(i.SideMode_Initial) referenced from side_mod.o(.data)
 <LI><a href="#[4]">SysTickIntHandler</a> from appl.o(i.SysTickIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[e]">UnlockEnterPSMode</a> from commandctrl.o(i.UnlockEnterPSMode) referenced from commandctrl.o(i.Command_Init)
 <LI><a href="#[15]">VaulModeBackground</a> from vault_mod.o(i.VaulModeBackground) referenced from vault_mod.o(.data)
 <LI><a href="#[14]">VaulMode_Initial</a> from vault_mod.o(i.VaulMode_Initial) referenced from vault_mod.o(.data)
 <LI><a href="#[5]">WatchdogIntHandler</a> from appl.o(i.WatchdogIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[9]">main</a> from appl.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[5e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[17]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[19]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[60]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[61]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[62]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[63]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[52]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_data
</UL>

<P><STRONG><a name="[64]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanBusTxWrite
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0IntHandler
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockEnterPSMode
</UL>

<P><STRONG><a name="[18]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[67]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>AddFucCommand</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, commandctrl.o(i.AddFucCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AddFucCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Init
</UL>

<P><STRONG><a name="[1a]"></a>App_Slave_Ctrl</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, slave_ctrl.o(i.App_Slave_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = App_Slave_Ctrl &rArr; vIR_Ctrl &rArr; port_Read_Input_Pin &rArr; port_Read_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vIR_Ctrl
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vButton_LED_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a]"></a>App_Slave_GetID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, slave_ctrl.o(i.App_Slave_GetID))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0IntHandler
</UL>

<P><STRONG><a name="[1d]"></a>App_Slave_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, slave_ctrl.o(i.App_Slave_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = App_Slave_Init &rArr; IORead_SlaveMode &rArr; port_Read_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IORead_SlaveMode
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>CAN0IntHandler</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, hcan.o(i.CAN0IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CAN0IntHandler &rArr; CanBusTxWrite &rArr; CanBusSet
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageGet
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageClear
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntStatus
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntClear
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANEnable
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanBusTxWrite
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Handler_Process
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Slave_GetID
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CANEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, can.o(i.CANEnable))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0IntHandler
</UL>

<P><STRONG><a name="[24]"></a>CANIntClear</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, can.o(i.CANIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0IntHandler
</UL>

<P><STRONG><a name="[23]"></a>CANIntStatus</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, can.o(i.CANIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0IntHandler
</UL>

<P><STRONG><a name="[26]"></a>CANMessageClear</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, can.o(i.CANMessageClear))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageClear
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageClear
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0IntHandler
</UL>

<P><STRONG><a name="[27]"></a>CANMessageGet</STRONG> (Thumb, 318 bytes, Stack size 20 bytes, can.o(i.CANMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CANMessageGet
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0IntHandler
</UL>

<P><STRONG><a name="[29]"></a>CMD_Handler_Process</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, commandctrl.o(i.CMD_Handler_Process))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0IntHandler
</UL>

<P><STRONG><a name="[2c]"></a>CanBusSet</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, hcan.o(i.CanBusSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CanBusSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanBusTxWrite
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
</UL>

<P><STRONG><a name="[2b]"></a>CanBusTxWrite</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, hcan.o(i.CanBusTxWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CanBusTxWrite &rArr; CanBusSet
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanBusSet
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0IntHandler
</UL>

<P><STRONG><a name="[2d]"></a>Command_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, commandctrl.o(i.Command_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Command_Init &rArr; AddFucCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddFucCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>CommonIOControl</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, iohandler.o(i.CommonIOControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CommonIOControl
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOWrite_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOOutputCtrl_Handler
</UL>

<P><STRONG><a name="[31]"></a>DEV_Clock_Init</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, hal_dev_initial.o(i.DEV_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DEV_Clock_Init &rArr; GPIOPinTypeCAN &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogReloadSet
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeCAN
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockFreqSet
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogResetEnable
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>DEV_IO_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_dev_initial.o(i.DEV_IO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_Init
</UL>

<P><STRONG><a name="[a]"></a>Dummy_Fucntions</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commandctrl.o(i.Dummy_Fucntions))
<BR>[Address Reference Count : 1]<UL><LI> commandctrl.o(i.Command_Init)
</UL>
<P><STRONG><a name="[2]"></a>FaultISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.FaultISR))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>GPIODirModeSet</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeCAN
</UL>

<P><STRONG><a name="[7]"></a>GPIOP0IntHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wiegand.o(i.GPIOP0IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOP0IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>GPIOPadConfigSet</STRONG> (Thumb, 284 bytes, Stack size 28 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_Init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeCAN
</UL>

<P><STRONG><a name="[37]"></a>GPIOPinTypeCAN</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeCAN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOPinTypeCAN &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Clock_Init
</UL>

<P><STRONG><a name="[8]"></a>GPIOQ0IntHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wiegand.o(i.GPIOQ0IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOQ0IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>GetWiegID</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wiegand.o(i.GetWiegID))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO1_Read
</UL>

<P><STRONG><a name="[5a]"></a>IOGetOutput_BitsMask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, iohandler.o(i.IOGetOutput_BitsMask))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sLed_Ctrl_Add
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sIR_Ctrl_Add
</UL>

<P><STRONG><a name="[1f]"></a>IOInputSetConfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, iohandler.o(i.IOInputSetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IOInputSetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VaulMode_Initial
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CABMode_Initial
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideMode_Initial
</UL>

<P><STRONG><a name="[3a]"></a>IOInput_Handler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iohandler.o(i.IOInput_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IOInput_Handler &rArr; InputProcess &rArr; port_Read_Input_Pin &rArr; port_Read_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>IOOutputClear_Handler</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, iohandler.o(i.IOOutputClear_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IOOutputClear_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOWrite_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>IOOutputCtrl_Handler</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, iohandler.o(i.IOOutputCtrl_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IOOutputCtrl_Handler &rArr; CommonIOControl
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonIOControl
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e]"></a>IORead_SlaveMode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, iohandler.o(i.IORead_SlaveMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IORead_SlaveMode &rArr; port_Read_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_Read_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Slave_Init
</UL>

<P><STRONG><a name="[30]"></a>IOWrite_Output</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, iohandler.o(i.IOWrite_Output))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portC_Write_pin
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portB_Write_pin
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portA_Write_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vIR_Ctrl
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vButton_LED_Ctrl
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonIOControl
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOOutputClear_Handler
</UL>

<P><STRONG><a name="[3b]"></a>InputProcess</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, iohandler.o(i.InputProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InputProcess &rArr; port_Read_Input_Pin &rArr; port_Read_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_Read_Input_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInput_Handler
</UL>

<P><STRONG><a name="[3]"></a>IntDefaultHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.IntDefaultHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>LED_Toggle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio_app.o(i.LED_Toggle))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_StatusLed_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO1_Read
</UL>

<P><STRONG><a name="[1]"></a>NmiSR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.NmiSR))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>OdMeter_Start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, odm.o(i.OdMeter_Start))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO1_Write
</UL>

<P><STRONG><a name="[4a]"></a>Odmeter_Reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, odm.o(i.Odmeter_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO1_Write
</UL>

<P><STRONG><a name="[49]"></a>Odmeter_Stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, odm.o(i.Odmeter_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO1_Write
</UL>

<P><STRONG><a name="[f]"></a>Read_Boot_Status</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, commandctrl.o(i.Read_Boot_Status))
<BR>[Address Reference Count : 1]<UL><LI> commandctrl.o(i.Command_Init)
</UL>
<P><STRONG><a name="[32]"></a>SysCtlClockFreqSet</STRONG> (Thumb, 528 bytes, Stack size 40 bytes, sysctl.o(i.SysCtlClockFreqSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysCtlClockFreqSet
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysCtlMemTimingGet
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Clock_Init
</UL>

<P><STRONG><a name="[33]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Clock_Init
</UL>

<P><STRONG><a name="[4f]"></a>SysCtlReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlReset))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockEnterPSMode
</UL>

<P><STRONG><a name="[4]"></a>SysTickIntHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appl.o(i.SysTickIntHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UnlockEnterPSMode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, commandctrl.o(i.UnlockEnterPSMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UnlockEnterPSMode &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlReset
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandctrl.o(i.Command_Init)
</UL>
<P><STRONG><a name="[36]"></a>WatchdogEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, watchdog.o(i.WatchdogEnable))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Clock_Init
</UL>

<P><STRONG><a name="[5]"></a>WatchdogIntHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, appl.o(i.WatchdogIntHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>WatchdogReloadSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, watchdog.o(i.WatchdogReloadSet))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Clock_Init
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35]"></a>WatchdogResetEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, watchdog.o(i.WatchdogResetEnable))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Clock_Init
</UL>

<P><STRONG><a name="[55]"></a>__delay_ms</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, appl.o(i.__delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>__delay_us</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, appl.o(i.__delay_us), UNUSED)

<P><STRONG><a name="[69]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[6a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[6b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[53]"></a>can_Init</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, hcan.o(i.can_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = can_Init &rArr; CanBusSet
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanBusSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>can_ResetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hcan.o(i.can_ResetError))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10ms
</UL>

<P><STRONG><a name="[9]"></a>main</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, appl.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = main &rArr; can_Init &rArr; CanBusSet
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWiegand_Task
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOdmeter
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogReloadSet
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOOutputCtrl_Handler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOOutputClear_Handler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInput_Handler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Clock_Init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Slave_Init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Slave_Ctrl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_ms
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[22]"></a>odm_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, odm.o(i.odm_init))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CABMode_Initial
</UL>

<P><STRONG><a name="[40]"></a>portA_Write_pin</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio_app.o(i.portA_Write_pin))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_Write_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOWrite_Output
</UL>

<P><STRONG><a name="[41]"></a>portB_Write_pin</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio_app.o(i.portB_Write_pin))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_Write_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOWrite_Output
</UL>

<P><STRONG><a name="[3f]"></a>portC_Write_pin</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio_app.o(i.portC_Write_pin))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_Write_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOWrite_Output
</UL>

<P><STRONG><a name="[54]"></a>port_Init</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, gpio_app.o(i.port_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = port_Init &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>port_Read_Input_Pin</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio_app.o(i.port_Read_Input_Pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = port_Read_Input_Pin &rArr; port_Read_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_Read_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vIR_Ctrl
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputProcess
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOdmeter
</UL>

<P><STRONG><a name="[3e]"></a>port_Read_pin</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gpio_app.o(i.port_Read_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = port_Read_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_Read_Input_Pin
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IORead_SlaveMode
</UL>

<P><STRONG><a name="[44]"></a>port_StatusLed_Write</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio_app.o(i.port_StatusLed_Write))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_Write_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Toggle
</UL>

<P><STRONG><a name="[58]"></a>port_Write_pin</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gpio_app.o(i.port_Write_pin))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_StatusLed_Write
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portC_Write_pin
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portB_Write_pin
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portA_Write_pin
</UL>

<P><STRONG><a name="[21]"></a>sIR_Ctrl_Add</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, slave_ctrl.o(i.sIR_Ctrl_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sIR_Ctrl_Add
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetOutput_BitsMask
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VaulMode_Initial
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CABMode_Initial
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideMode_Initial
</UL>

<P><STRONG><a name="[20]"></a>sLed_Ctrl_Add</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, slave_ctrl.o(i.sLed_Ctrl_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sLed_Ctrl_Add
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetOutput_BitsMask
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VaulMode_Initial
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CABMode_Initial
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideMode_Initial
</UL>

<P><STRONG><a name="[46]"></a>vOdmGetCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, odm.o(i.vOdmGetCount))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO1_Read
</UL>

<P><STRONG><a name="[47]"></a>vOdmGetSpeed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, odm.o(i.vOdmGetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO1_Read
</UL>

<P><STRONG><a name="[56]"></a>vOdmeter</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, odm.o(i.vOdmeter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vOdmeter &rArr; port_Read_Input_Pin &rArr; port_Read_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_Read_Input_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>vWiegand_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, wiegand.o(i.vWiegand_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vWiegand_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VaulMode_Initial
</UL>

<P><STRONG><a name="[57]"></a>vWiegand_Task</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, wiegand.o(i.vWiegand_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = vWiegand_Task &rArr; odd_parity_check
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odd_parity_check
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_parity_check
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_data
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_io_wieg_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4c]"></a>Task_10ms</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, appl.o(i.Task_10ms))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_ResetError
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b]"></a>vButton_LED_Ctrl</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, slave_ctrl.o(i.vButton_LED_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vButton_LED_Ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOWrite_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Slave_Ctrl
</UL>

<P><STRONG><a name="[1c]"></a>vIR_Ctrl</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, slave_ctrl.o(i.vIR_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vIR_Ctrl &rArr; port_Read_Input_Pin &rArr; port_Read_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_Read_Input_Pin
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOWrite_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Slave_Ctrl
</UL>

<P><STRONG><a name="[11]"></a>SideBackground</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, side_mod.o(i.SideBackground))
<BR>[Address Reference Count : 1]<UL><LI> side_mod.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>SideMode_Initial</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, side_mod.o(i.SideMode_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SideMode_Initial &rArr; sLed_Ctrl_Add
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sLed_Ctrl_Add
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sIR_Ctrl_Add
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInputSetConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> side_mod.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>CABModeBackground</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cab_mod.o(i.CABModeBackground))
<BR>[Address Reference Count : 1]<UL><LI> cab_mod.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>CABMode_Initial</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, cab_mod.o(i.CABMode_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CABMode_Initial &rArr; sLed_Ctrl_Add
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odm_init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sLed_Ctrl_Add
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sIR_Ctrl_Add
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInputSetConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cab_mod.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>VaulModeBackground</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vault_mod.o(i.VaulModeBackground))
<BR>[Address Reference Count : 1]<UL><LI> vault_mod.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>VaulMode_Initial</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, vault_mod.o(i.VaulMode_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VaulMode_Initial &rArr; sLed_Ctrl_Add
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWiegand_Init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sLed_Ctrl_Add
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sIR_Ctrl_Add
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInputSetConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vault_mod.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>HeartBeat_Read</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commandctrl.o(i.HeartBeat_Read))
<BR>[Address Reference Count : 1]<UL><LI> commandctrl.o(i.Command_Init)
</UL>
<P><STRONG><a name="[c]"></a>SDO1_Read</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, commandctrl.o(i.SDO1_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDO1_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOdmGetSpeed
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOdmGetCount
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Toggle
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWiegID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandctrl.o(i.Command_Init)
</UL>
<P><STRONG><a name="[b]"></a>SDO1_Write</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, commandctrl.o(i.SDO1_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDO1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Odmeter_Stop
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Odmeter_Reset
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OdMeter_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandctrl.o(i.Command_Init)
</UL>
<P><STRONG><a name="[5d]"></a>app_io_wieg_handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wiegand.o(i.app_io_wieg_handler))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWiegand_Task
</UL>

<P><STRONG><a name="[51]"></a>bit_data</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wiegand.o(i.bit_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bit_data
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWiegand_Task
</UL>

<P><STRONG><a name="[5b]"></a>even_parity_check</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, wiegand.o(i.even_parity_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = even_parity_check
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWiegand_Task
</UL>

<P><STRONG><a name="[5c]"></a>odd_parity_check</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, wiegand.o(i.odd_parity_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = odd_parity_check
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWiegand_Task
</UL>

<P><STRONG><a name="[4b]"></a>_SysCtlMemTimingGet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sysctl.o(i._SysCtlMemTimingGet))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockFreqSet
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
